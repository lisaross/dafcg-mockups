#!/bin/bash
# PostToolUse hook: Auto-format markdown files and silent validation
set -euo pipefail

LOG_FILE=".claude/activity.log"

# Ensure log file exists
mkdir -p .claude
touch "$LOG_FILE"

# Auto-format markdown files after Edit, Write, or MultiEdit operations
if [[ "${CLAUDE_TOOL_NAME:-}" =~ ^(Edit|Write|MultiEdit|NotebookEdit)$ ]]; then
    # Check if any markdown files were modified
    if [[ "${CLAUDE_TOOL_ARGS:-}" == *".md"* ]]; then
        echo "📝 Auto-formatting markdown files..." >> "$LOG_FILE"
        
        # Run prettier on all markdown files (silent to avoid noise)
        if npx prettier --write "**/*.md" >/dev/null 2>&1; then
            echo "  ✅ Markdown files formatted with prettier" >> "$LOG_FILE"
        else
            echo "  ⚠️  Prettier formatting had issues (non-critical)" >> "$LOG_FILE"
        fi
        
        # Run markdownlint silently for validation (don't show output)
        if npx markdownlint "**/*.md" >/dev/null 2>&1; then
            echo "  ✅ Markdown validation passed" >> "$LOG_FILE"
        else
            # Don't show all violations, just note they exist
            echo "  📋 Markdown linting found issues (see manual check)" >> "$LOG_FILE"
        fi
    fi
fi

# Create daily summary placeholder if needed (only once per day)
TODAY=$(date +%Y-%m-%d)
DAILY_FILE=".claude/daily-summary/${TODAY}.md"

if [[ ! -f "$DAILY_FILE" ]]; then
    mkdir -p .claude/daily-summary
    cat > "$DAILY_FILE" << EOF
# Daily Summary - $TODAY

## Tasks Completed

- [Placeholder - AI analysis will populate this]

## Progress Made

- [Placeholder - AI analysis will populate this]

## Blockers & Issues

- [Placeholder - AI analysis will populate this]

## Next Steps

- [Placeholder - AI analysis will populate this]

---
*Generated by daily summary system - use \`/analyze-activity\` to populate with AI analysis*
EOF
    echo "  📅 Created daily summary placeholder: $DAILY_FILE" >> "$LOG_FILE"
fi

echo "  ✅ Post-tool tracking complete" >> "$LOG_FILE"